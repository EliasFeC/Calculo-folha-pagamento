import models.Funcionarios;

import java.sql.*;
import java.util.ArrayList;
import java.util.Properties;


public class Main {

    static final String DRIVER_BD = "com.mysql.cj.jdbc.Driver";
    static final String URL_BD = "jdbc:mysql://localhost:3306/rh2";
    static final String USUARIO_BD = "root";
    static final String SENHA_BD = "12345";

    /**
     * Registra o driver MySql para conexão com o SGBD.
     * Somente após o registro no método main, podemos
     * estabelecer a conexão com o banco de dados MySQL.
     * @see <a href="https://github.com/mysql/mysql-connector-j">Repositório MySQL Connector/J</a>
     */
    static void carregarDriverMySql() throws RuntimeException {

        try {

            Class.forName(DRIVER_BD);

        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    /***
     * Estabelece uma conexão com o banco de dados.
     * @return um objeto {@link Connection} que representa uma conexão com o SGBD
     * @throws SQLException se houver um erro ou falha de conexão
     */
    static Connection criarConexao() throws SQLException {

        Connection conexao = null;
        Properties propriedadesDaConexao = new Properties();

        propriedadesDaConexao.put("user", USUARIO_BD);
        propriedadesDaConexao.put("password", SENHA_BD);

        try {

            conexao = DriverManager.getConnection(URL_BD, propriedadesDaConexao);

        } catch (SQLException e) {

            System.err.println("SQLException: " + e.getMessage());
            System.err.println("SQLState: " + e.getSQLState());
            System.err.println("VendorError: " + e.getErrorCode());

        }
        return conexao;
    }


    /**
     * Adiciona um novo registro no banco de dados
     * @param
     * @return o id do cliente recém-criado ou -1 em caso de erro
     */
    public static void cadastrarFuncionario(Funcionarios funcionario) {
        String sql = "INSERT INTO funcionarios (matricula, nome, sexo, idade, salario) VALUES (?, ?, ?, ?, ?)";

        try (
                Connection connection = DriverManager.getConnection(URL_BD, USUARIO_BD, SENHA_BD);
                PreparedStatement preparedStatement = connection.prepareStatement(sql)
        ) {
            preparedStatement.setInt(1, funcionario.getMatricula());
            preparedStatement.setString(2, funcionario.getNome());
            preparedStatement.setString(3, funcionario.getSexo());
            preparedStatement.setInt(4, funcionario.getIdade());
            preparedStatement.setDouble(5, funcionario.getSalario());

            int linhasAfetadas = preparedStatement.executeUpdate();

            if (linhasAfetadas > 0) {
                System.out.println("Funcionário cadastrado com sucesso!");
            } else {
                System.out.println("Erro ao cadastrar o funcionário.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    } // Fim do método inserirFuncionario()


    /**
     * Seleciona um funcionario do banco de dados através da sua matricula
     * @param Matricula chave primária do funcionario
     * @return o objeto do tipo Funcionario encontrado, ou null se não for encontrado ou em caso de erro
     */
    static Funcionarios buscarFuncionario(int Matricula) {

        Funcionarios funcionarios = null;

        String query = "SELECT * FROM Funcionarios WHERE Matricula = ?;";

        try (Connection conexao = criarConexao()) {

            PreparedStatement comando = conexao.prepareStatement(query);
            comando.setInt(1, Matricula);

            ResultSet resultado = comando.executeQuery();

            while (resultado.next()) {

                Matricula = resultado.getInt("Matricula");
                String Nome = resultado.getString("Nome");
                String Sexo = resultado.getString("Sexo");
                int Idade = resultado.getInt("Idade");
                double Salario = resultado.getDouble("Salario");

                funcionarios = new Funcionarios(Matricula, Nome, Sexo, Idade, Salario);
            }

        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }

        return funcionarios;
    }


    /**
     * Obtém todos os produtos
     * @return um objeto do Produto encontrado, ou null se não encontrado ou em caso de erro
     */
    static ArrayList<Funcionarios> buscarTodosFuncionarios() {

        ArrayList<Funcionarios> funcionarios = new ArrayList<Funcionarios>();
        String query = "SELECT * FROM Funcionarios;";

        try (Connection conexao = criarConexao()) {

            Statement comando = conexao.createStatement();
            ResultSet resultado = comando.executeQuery(query);

            while (resultado.next()) {

                int Matricula = resultado.getInt("Matricula");
                String Nome = resultado.getString("Nome");
                String Sexo = resultado.getString("Sexo");
                int Idade = resultado.getInt("Idade");
                double Salario = resultado.getDouble("Salario");

                funcionarios.add(new Funcionarios(Matricula, Nome, Sexo, Idade, Salario));

            }

        } catch (SQLException e) {

            System.err.println("SQLException: " + e.getMessage());

        }

        return funcionarios;
    }


    /**
     * Atualiza um departamento no banco de dados
     * @param funcionarios com dados desatualizados
     * @return true em caso de sucesso ou false em caso de falha ou erro
     */
    static boolean atualizarFuncionarios(Funcionarios funcionarios) {

        boolean funcionarioAtualizado = false;

        String query = "UPDATE Funcionarios SET Nome = ?, Sexo = ?, Idade = ?, Salario = ?, WHERE Matricula = ?;";

        try (Connection conexao = criarConexao()) {

            PreparedStatement comando = conexao.prepareStatement(query);

            comando.setString(1, funcionarios.getNome());
            comando.setString(2, funcionarios.getSexo());
            comando.setInt(2, funcionarios.getIdade());
            comando.setDouble(2, funcionarios.getSalario());
            comando.setInt(3, funcionarios.getMatricula());


            int linhasAfetadas = comando.executeUpdate();

            if (linhasAfetadas == 1)
                funcionarioAtualizado = true;

        } catch (SQLException e) {

            System.err.println(e.getMessage());

        }

        return funcionarioAtualizado;
    }

    /**
     * Apaga um registro no banco de dados
     * @param Matricula chave primária do Departamento
     * @return true em caso de sucesso ou false em caso de falha
     */
    static boolean excluirFuncionario(int Matricula) {

        boolean excluido = false;
        String query = "DELETE FROM Funcionarios WHERE Matricula = ?;";

        try (Connection conexao = criarConexao()) {

            PreparedStatement comando = conexao.prepareStatement(query);
            comando.setLong(1, Matricula);

            int linhasAfetadas = comando.executeUpdate();

            if (linhasAfetadas == 1)
                excluido = true;

        } catch (SQLException e) {

            System.err.println(e.getMessage());

        }

        return excluido;

    } // Fim do método excluirFuncionario()



    /**
     * Exibe na tela informações de um departamento
     * @param f
     */
    static void mostrarFuncionarios(Funcionarios f) {

        StringBuilder sb = new StringBuilder();

        sb.append(String.format("Matricula: %d\n", f.getMatricula()));
        sb.append(String.format("Nome: %s\n", f.getNome()));
        sb.append(String.format("Sexo: %s\n", f.getSexo()));
        sb.append(String.format("Idade: %s\n", f.getIdade()));
        sb.append(String.format("Salario: %s\n", f.getSalario()));

        System.out.println(sb.toString());

    } // Fim do método mostrarFuncionario


    static void mostrarTodosFuncionarios(ArrayList<Funcionarios> funcionarios) {

        System.out.println();

        for (Funcionarios f : funcionarios)
            mostrarFuncionarios(f);

    }

    public static void main(String[] args) {

        carregarDriverMySql();
        Funcionarios funcionario = new Funcionarios(1, "João Silva", "M", 30, 5000.00);
        cadastrarFuncionario(funcionario);
        /**********************************************************************************
         *                               TESTANDO O CRUD                                  *
         * CRUD são as quatro operações básicas utilizadas em bancos de dados relacionais *
         *              C -- Create • R -- READ • U -- UPDATE • D -- DELETE                   *
         **********************************************************************************/

        // CREATE: vamos cadastrar, adicionar, inserir ou salvar um registro no banco de dados.
        // Após adicionar registros, comente as linhas para não criar linhas duplicadas (repetidas)


    }


}
